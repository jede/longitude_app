$longitude-column-width: 60px !default;
$longitude-gutter-width: 10px !default;
$longitude-force-widest-layout: false !default;

$longitude-current-max-width: 100%;
$longitude-column-count: 0;
@function column-count(){
  @return $longitude-column-count;
}

@function base-width($columns: column-count()){
  @return $columns * ($longitude-column-width + $longitude-gutter-width * 2);
}

@function column-width() {
  @return ($longitude-current-max-width * $longitude-column-width / base-width())
}

@function gutter-width() {
  @return ($longitude-current-max-width * $longitude-gutter-width / base-width())
}

@function gutter($n:1){
  @return $n * gutter-width();
}

@mixin gutters {
  margin-left: gutter();
  margin-right: gutter();
}

@function columns($n, $outer-gutters: false) {
  $width: $n * column-width() + ($n - 1) * gutter(2);
  @if $outer-gutters {
    $width: $width + gutter(2);
  }
  @return $width;
}

@function full-width($outer-gutters: true) {
  @return columns(column-count(), $outer-gutters)
}

@mixin longitude($columns-list) {
  $last-column-count: 0;
  @each $columns in $columns-list {
    @if $longitude-force-widest-layout != true {
      $longitude-column-count: $columns;
      $min-width: base-width($last-column-count);
      $max-width: base-width();

      $query: '(max-width: #{$max-width})';
      @if $min-width > 0 {
        $query: '(min-width: #{$min-width + 1px}) and #{$query}';
        @media $query { @content; }
      } @else {
        @content;
      }
    }
    $last-column-count: $columns;
  }
  $longitude-column-count: $last-column-count;
  $longitude-current-max-width: base-width();
  @if $longitude-force-widest-layout {
    @content;
  } @else {
    $query: '(min-width: #{base-width($last-column-count) + 1px})';
    @media $query { @content; }
  }
}

